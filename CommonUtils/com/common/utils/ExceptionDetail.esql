

BROKER SCHEMA com.common.utils


CREATE COMPUTE MODULE ExceptionDetail
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		DECLARE messageNumber INTEGER 0;
		DECLARE messageText CHARACTER '';
		
		IF EXISTS(InputExceptionList.*[]) THEN
			DECLARE listRef REFERENCE TO InputExceptionList;
			CALL getLastExceptionDetail(listRef, messageNumber, messageText);
		ELSE
			SET OutputRoot = InputRoot;
			PROPAGATE;	
		END IF;	
		
		SET OutputRoot.JSON = NULL;
		SET OutputRoot.JSON.Data.Audit.CorrelationId 		= UUIDASCHAR;
		SET OutputRoot.JSON.Data.Audit.CreatedDate 			= CURRENT_TIMESTAMP;
		SET OutputRoot.JSON.Data.Audit.Node 				= BrokerName;
		SET OutputRoot.JSON.Data.Audit.Server 				= ExecutionGroupLabel;
		SET OutputRoot.JSON.Data.Audit.Request 				= COALESCE(ASBITSTREAM(InputRoot.JSON CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding),'');
		SET OutputRoot.JSON.Data.Audit.Response 			= COALESCE(ASBITSTREAM(OutputRoot.JSON CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding),'');
		SET OutputRoot.JSON.Data.Audit.ErrorCode			= messageNumber;
		SET OutputRoot.JSON.Data.Audit.ErrorText 			= messageText;
		SET OutputRoot.JSON.Data.Audit.ExceptionList		= COALESCE(ASBITSTREAM(InputExceptionList CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding),'');
		SET	OutputRoot.JSON.Data.Result						= InputRoot.JSON.Data.Result;
		
		PROPAGATE TO TERMINAL 1;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

	CREATE PROCEDURE getLastExceptionDetail(IN InputTree reference,OUT messageNumber integer,
	OUT messageText char)
	/****************************************************************************
	* A procedure that will get the details of the last exception from a message
	* IN InputTree: The incoming exception list
	* IN messageNumber: The last message numberr.
	* IN messageText: The last message text.
	*****************************************************************************/
	BEGIN
		-- Create a reference to the first child of the exception list
		declare ptrException reference to InputTree.*[1];
		-- keep looping while the moves to the child of exception list work
		WHILE lastmove(ptrException) DO
			-- store the current values for the error number and text
			IF ptrException.Number is not null THEN
				SET messageNumber = ptrException.Number;
				SET messageText = ptrException.Text;
			END IF;
			-- now move to the last child which should be the next exceptionlist
			move ptrException lastchild;
		END WHILE;
	END;
END MODULE;